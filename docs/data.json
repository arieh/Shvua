{
    "project": {
        "name": "Shvua",
        "description": "A Promise/A+ compliant library, that allows you to extend your object's methods with promise-like API",
        "version": "1.1.0"
    },
    "files": {
        "src/Events.js": {
            "name": "src/Events.js",
            "modules": {
                "Events": 1
            },
            "classes": {
                "Events": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Shvua.js": {
            "name": "src/Shvua.js",
            "modules": {
                "Shvua": 1
            },
            "classes": {
                "Shvua.Promise": 1,
                "Shvua.ExtPromise": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Events": {
            "name": "Events",
            "submodules": {},
            "classes": {
                "Events": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/Events.js",
            "line": 134
        },
        "Shvua": {
            "name": "Shvua",
            "submodules": {},
            "classes": {
                "Shvua.Promise": 1,
                "Shvua.ExtPromise": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/Shvua.js",
            "line": 293
        }
    },
    "classes": {
        "Events": {
            "name": "Events",
            "shortname": "Events",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Shvua.Promise"
            ],
            "module": "Events",
            "namespace": "",
            "file": "src/Events.js",
            "line": 134,
            "description": "Events Provider.\n\nCan function either as a standalone or a Mixin",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "element to use as event target. Optional",
                    "type": "Element"
                }
            ]
        },
        "Shvua.Promise": {
            "name": "Shvua.Promise",
            "shortname": "Shvua.Promise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Shvua",
            "namespace": "",
            "file": "src/Shvua.js",
            "line": 60,
            "is_constructor": 1,
            "uses": [
                "Events"
            ],
            "params": [
                {
                    "name": "cb",
                    "description": "a function to use for updating promise state. Parameters passed to callback will be fulfill function and reject function.",
                    "type": "Fucntion",
                    "optional": true
                }
            ]
        },
        "Shvua.ExtPromise": {
            "name": "Shvua.ExtPromise",
            "shortname": "Shvua.ExtPromise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Shvua",
            "namespace": "",
            "file": "src/Shvua.js",
            "line": 293,
            "extends": "Promise",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "src/Events.js",
            "line": 45,
            "description": "removes the on* prefix from event names",
            "itemtype": "method",
            "name": "Events.removeOn",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 60,
            "description": "returns a structured data object about a type's pseudo-events",
            "itemtype": "method",
            "name": "getPseudo",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data",
                "type": "Object"
            },
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 83,
            "description": "proccesses an event type, returning a valid data object from that name",
            "itemtype": "method",
            "name": "processType",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data",
                "type": "Object"
            },
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 97,
            "description": "cross-browser function to create event object for fire method\n\nCreated object will always have following properties:\n - dispatcher: a reference to dispatching object (since we can't use 'this')\n - args: arguments passed alongside the event\n - object_event: a flag set to true to easily check if this is an object event or a normal DOM event.",
            "itemtype": "method",
            "name": "Events.createEvent",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "dispatcher",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "event object"
            },
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 188,
            "description": "A list of aliases for Events methods. Use this to add similar syntax to other event implementations\n\nBy default, aliases include most of EventEmitter interface",
            "itemtype": "property",
            "name": "aliases",
            "type": "object",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 315,
            "description": "Adds an event",
            "itemtype": "method",
            "name": "addEvent",
            "params": [
                {
                    "name": "the",
                    "description": "event type",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "function to add",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 347,
            "description": "Helper to add multiple events at once",
            "itemtype": "method",
            "name": "addEvents",
            "params": [
                {
                    "name": "literal",
                    "description": "object of event types => callbacks",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 367,
            "description": "dispatches an event",
            "itemtype": "method",
            "name": "fireEvent",
            "params": [
                {
                    "name": "event",
                    "description": "type",
                    "type": "String"
                },
                {
                    "name": "arguments",
                    "description": "to pass with the event",
                    "type": "Mixed"
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 407,
            "description": "removes a function from an event",
            "itemtype": "method",
            "name": "removeEvent",
            "params": [
                {
                    "name": "event",
                    "description": "type",
                    "type": "String"
                },
                {
                    "name": "function",
                    "description": "to remove from stack",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 431,
            "description": "Adds an event for one execution, then removes it",
            "itemtype": "method",
            "name": "addEventOnce",
            "params": [
                {
                    "name": "the",
                    "description": "event type",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "function to add",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 454,
            "description": "Fires a latched event",
            "itemtype": "method",
            "name": "fireLatchedEvent",
            "params": [
                {
                    "name": "the",
                    "description": "event type",
                    "type": "String"
                },
                {
                    "name": "arguments",
                    "description": "to pass with the event",
                    "type": "Mixed"
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Shvua.js",
            "line": 103,
            "itemtype": "event",
            "name": "fulfill\nfires when a promise has been fulfilled",
            "params": [
                {
                    "name": "value",
                    "description": "the promise's value"
                }
            ],
            "class": "Shvua.Promise",
            "module": "Shvua"
        },
        {
            "file": "src/Shvua.js",
            "line": 108,
            "itemtype": "event",
            "name": "reject\nfires when a promise has been rejected",
            "params": [
                {
                    "name": "reason",
                    "description": "the rejection's reason"
                }
            ],
            "class": "Shvua.Promise",
            "module": "Shvua"
        },
        {
            "file": "src/Shvua.js",
            "line": 114,
            "itemtype": "property",
            "name": "STATES",
            "final": "",
            "static": 1,
            "type": "ENUM",
            "class": "Shvua.Promise",
            "module": "Shvua"
        },
        {
            "file": "src/Shvua.js",
            "line": 128,
            "itemtype": "property",
            "name": "$fulfillment_state",
            "type": "Promise.STATES",
            "class": "Shvua.Promise",
            "module": "Shvua"
        },
        {
            "file": "src/Shvua.js",
            "line": 133,
            "itemtype": "property",
            "name": "$fulfillment_value\nvalue of fulfilled promise",
            "class": "Shvua.Promise",
            "module": "Shvua"
        },
        {
            "file": "src/Shvua.js",
            "line": 138,
            "itemtype": "property",
            "name": "$rejection_reason\nreason for rejected promise",
            "class": "Shvua.Promise",
            "module": "Shvua"
        },
        {
            "file": "src/Shvua.js",
            "line": 149,
            "description": "This method allows the user to take action upon promise fulfillment or rejection",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "onFulfill",
                    "description": "a callback to call when promise has been fulfilled. Will be passed promise's value.\n                       for more info look in spec.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onReject",
                    "description": "a callback to call upon rejection. Will be passed promise's rejection reason.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Shvua.Promise"
            },
            "class": "Shvua.Promise",
            "module": "Shvua"
        },
        {
            "file": "src/Shvua.js",
            "line": 200,
            "description": "this method can be used to fulfil a Promise outside of it's scope.",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "chainable": 1,
            "class": "Shvua.Promise",
            "module": "Shvua"
        },
        {
            "file": "src/Shvua.js",
            "line": 227,
            "description": "this method can be used to reject a promise outside the scope",
            "params": [
                {
                    "name": "reason",
                    "description": ""
                }
            ],
            "chainable": 1,
            "class": "Shvua.Promise",
            "module": "Shvua"
        },
        {
            "file": "src/Shvua.js",
            "line": 245,
            "description": "This method will enter the callback into the fulfill stack and will return a Promise for it",
            "itemtype": "method",
            "name": "done",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "cb",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Shvua.Promise"
            },
            "class": "Shvua.Promise",
            "module": "Shvua"
        },
        {
            "file": "src/Shvua.js",
            "line": 257,
            "description": "This method will enter the callback into the reject stack and will return a Promise for it",
            "itemtype": "method",
            "name": "fail",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "cb",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Shvua.Promise"
            },
            "class": "Shvua.Promise",
            "module": "Shvua"
        },
        {
            "file": "src/Shvua.js",
            "line": 271,
            "description": "This method can be used to create custom promises that would wrap an object's methods",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "target object",
                    "type": "Mixed"
                },
                {
                    "name": "methods",
                    "description": "a list of method names to wrap",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "a new extended Promise constructor",
                "type": "Shvua.ExtPromise"
            },
            "class": "Shvua.Promise",
            "module": "Shvua"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/Shvua.js:149"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/Shvua.js:245"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/Shvua.js:257"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/Shvua.js:271"
        },
        {
            "message": "Missing item type\nthis method can be used to fulfil a Promise outside of it's scope.",
            "line": " src/Shvua.js:200"
        },
        {
            "message": "Missing item type\nthis method can be used to reject a promise outside the scope",
            "line": " src/Shvua.js:227"
        }
    ]
}