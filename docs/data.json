{
    "project": {
        "name": "Shvua",
        "description": "A Promise/A+ compliant library, that allows you to extend your object's methods with promise-like API",
        "version": "0.1.1"
    },
    "files": {
        "lib/require.js": {
            "name": "lib/require.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/Events.js": {
            "name": "src/Events.js",
            "modules": {
                "Events": 1
            },
            "classes": {
                "Events": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Promise.js": {
            "name": "src/Promise.js",
            "modules": {
                "Promise": 1
            },
            "classes": {
                "Promise": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "test/lib/JasmineAdapter.js": {
            "name": "test/lib/JasmineAdapter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "test/lib/jasmine.js": {
            "name": "test/lib/jasmine.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Events": {
            "name": "Events",
            "submodules": {},
            "classes": {
                "Events": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/Events.js",
            "line": 134
        },
        "Promise": {
            "name": "Promise",
            "submodules": {},
            "classes": {
                "Promise": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/Promise.js",
            "line": 60
        }
    },
    "classes": {
        "Events": {
            "name": "Events",
            "shortname": "Events",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "Promise"
            ],
            "module": "Events",
            "namespace": "",
            "file": "src/Events.js",
            "line": 134,
            "description": "Events Provider.\n\nCan function either as a standalone or a Mixin",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el",
                    "description": "element to use as event target. Optional",
                    "type": "Element"
                }
            ]
        },
        "Promise": {
            "name": "Promise",
            "shortname": "Promise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Promise",
            "namespace": "",
            "file": "src/Promise.js",
            "line": 60,
            "is_constructor": 1,
            "uses": [
                "Events"
            ],
            "params": [
                {
                    "name": "cb",
                    "description": "a function to use for updating promise state. Paramaters passed to callback will be fullfil function and reject function.",
                    "type": "Fucntion",
                    "optional": true
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "lib/require.js",
            "line": 1,
            "license": "RequireJS 2.0.5 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/jrburke/requirejs for details",
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 50,
            "description": "Helper function for iterating over an array. If the func returns\na true value, it will break out of the loop.",
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 65,
            "description": "Helper function for iterating over an array backwards. If the func\nreturns a true value, it will break out of the loop.",
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 84,
            "description": "Cycles over properties in an object and calls a function for each\nproperty value. If the function returns a truthy value, then the\niteration is stopped.",
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 100,
            "description": "Simple function to mix in properties from source into target,\nbut only if target does not already have a property of the same name.\nThis is not robust in IE for transferring methods that match\nObject.prototype names, but the uses of mixin here seem unlikely to\ntrigger a problem related to that.",
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 185,
            "description": "Constructs an error with a pointer to an URL with more information.",
            "params": [
                {
                    "name": "id",
                    "description": "the error ID that maps to an ID on a web page.",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "human readable error.",
                    "type": "String"
                },
                {
                    "name": "err",
                    "description": "the original error, if there is one.",
                    "type": "Error",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Error"
            },
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 248,
            "description": "Trims the . and .. from an array of path segments.\nIt will keep a leading path segment if a .. will become\nthe first path segment, to help with module name lookups,\nwhich act like paths, but can be remapped. But the end result,\nall paths that use this function should look normalized.\nNOTE: this method MODIFIES the input array.",
            "params": [
                {
                    "name": "ary",
                    "description": "the array of path segments.",
                    "type": "Array"
                }
            ],
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 281,
            "description": "Given a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "params": [
                {
                    "name": "name",
                    "description": "the relative name",
                    "type": "String"
                },
                {
                    "name": "baseName",
                    "description": "a real name that the name arg is relative\nto.",
                    "type": "String"
                },
                {
                    "name": "applyMap",
                    "description": "apply the map config to the value. Should\nonly be done if this normalization is for a dependency ID.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "normalized name",
                "type": "String"
            },
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 414,
            "description": "Creates a module mapping that includes plugin prefix, module\nname, and path. If parentModuleMap is provided it will\nalso normalize the name via require.normalize()",
            "params": [
                {
                    "name": "name",
                    "description": "the module name",
                    "type": "String"
                },
                {
                    "name": "parentModuleMap",
                    "description": "parent module map\nfor the module name, used to resolve relative names.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "isNormalized:",
                    "description": "is the ID already normalized.\nThis is true if this call is done for a define() module ID.",
                    "type": "Boolean"
                },
                {
                    "name": "applyMap:",
                    "description": "apply the map config to the ID.\nShould only be true if this map is for a dependency.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 544,
            "description": "Internal method to transfer globalQueue items to this context's\ndefQueue.",
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 560,
            "description": "Helper function that creates a require function object to give to\nmodules that ask for it as a dependency. It needs to be specific\nper module because of the implication of path mappings that may\nneed to be relative to the module name.",
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 944,
            "description": "Checks is the module is ready to define itself, and if so,\ndefine it. If the silent argument is true, then it will just\ndefine, but not notify listeners, and not ask for a context-wide\ncheck of all loaded modules. That is useful for cycle breaking.",
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 1267,
            "description": "Given an event from a script node, get the requirejs info from it,\nand then removes the event listeners on the node.",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 1300,
            "description": "Set a configuration for the context.",
            "params": [
                {
                    "name": "cfg",
                    "description": "config object to integrate.",
                    "type": "Object"
                }
            ],
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 1517,
            "description": "Called to enable a module if it is still in the registry\nawaiting enablement. parent module is passed in for context,\nused by the optimizer.",
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 1529,
            "description": "Internal method used by environment adapters to complete a load event.\nA load event could be a script load or just a load pass from a synchronous\nload call.",
            "params": [
                {
                    "name": "moduleName",
                    "description": "the name of the module to potentially complete.",
                    "type": "String"
                }
            ],
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 1585,
            "description": "Converts a module name + .extension into an URL path.\n*Requires* the use of a module name. It does not support using\nplain URLs like nameToUrl.",
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 1603,
            "description": "Converts a module name to a file path. Supports cases where\nmoduleName may actually be just an URL.\nNote that it **does not** call normalize on the moduleName,\nit is assumed to have already been normalized. This is an\ninternal API, not a public one. Use toUrl for the public API.",
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 1674,
            "description": "Executes a module callack function. Broken out as a separate function\nsolely to allow the build system to sequence the files in the built\nlayer in the right sequence.",
            "access": "private",
            "tagname": "",
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 1685,
            "description": "callback for script loads, used to check status of loading.",
            "params": [
                {
                    "name": "evt",
                    "description": "the event from the browser for the script\nthat was loaded.",
                    "type": "Event"
                }
            ],
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 1707,
            "description": "Callback for script errors.",
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 1719,
            "description": "Main entry point.\n\nIf the only argument to require is a string, then the module that\nis represented by that string is fetched for the appropriate context.\n\nIf the first argument is an array, then it will be treated as an array\nof dependency string names to fetch. An optional function callback can\nbe specified to execute when all of those dependencies are available.\n\nMake a local req variable to help Caja compliance (it assumes things\non a require that are not standardized), and to give a short\nname for minification/local scope use.",
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 1769,
            "description": "Support require.config() to make it easier to cooperate with other\nAMD loaders on globally agreed names.",
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 1777,
            "description": "Export require as a global, but only if it does not already exist.",
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 1812,
            "description": "Any errors that require explicitly generates will be passed to this\nfunction. Intercept/override it if you want custom error handling.",
            "params": [
                {
                    "name": "err",
                    "description": "the error object.",
                    "type": "Error"
                }
            ],
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 1821,
            "description": "Does the request to load a module for the browser case.\nMake this a separate function to allow other environments\nto override it.",
            "params": [
                {
                    "name": "context",
                    "description": "the require context to find state.",
                    "type": "Object"
                },
                {
                    "name": "moduleName",
                    "description": "the name of the module.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "the URL to the module.",
                    "type": "Object"
                }
            ],
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 1967,
            "description": "The function that handles definitions of modules. Differs from\nrequire() in that a string for the module should be the first argument,\nand the function to execute after dependencies are loaded should\nreturn a value to define the module corresponding to the first argument's\nname.",
            "class": "Events"
        },
        {
            "file": "lib/require.js",
            "line": 2040,
            "description": "Executes the text. Normally just uses eval, but can be modified\nto use a better, environment-specific call. Only used for transpiling\nloader plugins, not for plain JS modules.",
            "params": [
                {
                    "name": "text",
                    "description": "the text to execute/evaluate.",
                    "type": "String"
                }
            ],
            "class": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 45,
            "description": "removes the on* prefix from event names",
            "itemtype": "method",
            "name": "Events.removeOn",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 60,
            "description": "returns a structured data object about a type's pseudo-events",
            "itemtype": "method",
            "name": "getPseudo",
            "access": "private",
            "tagname": "",
            "static": 1,
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data",
                "type": "Object"
            },
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 83,
            "description": "proccesses an event type, returning a valid data object from that name",
            "itemtype": "method",
            "name": "processType",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "data",
                "type": "Object"
            },
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 97,
            "description": "cross-browser function to create event object for fire method\n\nCreated object will always have following properties:\n - dispatcher: a reference to dispatching object (since we can't use 'this')\n - args: arguments passed alongside the event\n - object_event: a flag set to true to easily check if this is an object event or a normal DOM event.",
            "itemtype": "method",
            "name": "Events.createEvent",
            "static": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "dispatcher",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "event object"
            },
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 188,
            "description": "A list of aliases for Events methods. Use this to add similar syntax to other event implementations\n\nBy default, aliases include most of EventEmitter interface",
            "itemtype": "property",
            "name": "aliases",
            "type": "object",
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 315,
            "description": "Adds an event",
            "itemtype": "method",
            "name": "addEvent",
            "params": [
                {
                    "name": "the",
                    "description": "event type",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "function to add",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 347,
            "description": "Helper to add multiple events at once",
            "itemtype": "method",
            "name": "addEvents",
            "params": [
                {
                    "name": "literal",
                    "description": "object of event types => callbacks",
                    "type": "Object"
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 367,
            "description": "dispatches an event",
            "itemtype": "method",
            "name": "fireEvent",
            "params": [
                {
                    "name": "event",
                    "description": "type",
                    "type": "String"
                },
                {
                    "name": "arguments",
                    "description": "to pass with the event",
                    "type": "Mixed"
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 407,
            "description": "removes a function from an event",
            "itemtype": "method",
            "name": "removeEvent",
            "params": [
                {
                    "name": "event",
                    "description": "type",
                    "type": "String"
                },
                {
                    "name": "function",
                    "description": "to remove from stack",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 431,
            "description": "Adds an event for one execution, then removes it",
            "itemtype": "method",
            "name": "addEventOnce",
            "params": [
                {
                    "name": "the",
                    "description": "event type",
                    "type": "String"
                },
                {
                    "name": "a",
                    "description": "function to add",
                    "type": "Function"
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Events.js",
            "line": 454,
            "description": "Fires a latched event",
            "itemtype": "method",
            "name": "fireLatchedEvent",
            "params": [
                {
                    "name": "the",
                    "description": "event type",
                    "type": "String"
                },
                {
                    "name": "arguments",
                    "description": "to pass with the event",
                    "type": "Mixed"
                }
            ],
            "chainable": 1,
            "class": "Events",
            "module": "Events"
        },
        {
            "file": "src/Promise.js",
            "line": 101,
            "itemtype": "event",
            "name": "fulfill\nfires when a promise has been fulfilled",
            "params": [
                {
                    "name": "value",
                    "description": "the promise's value"
                }
            ],
            "class": "Promise",
            "module": "Promise"
        },
        {
            "file": "src/Promise.js",
            "line": 106,
            "itemtype": "event",
            "name": "reject\nfires when a promise has been rejected",
            "params": [
                {
                    "name": "reason",
                    "description": "the rejection's reason"
                }
            ],
            "class": "Promise",
            "module": "Promise"
        },
        {
            "file": "src/Promise.js",
            "line": 112,
            "itemtype": "property",
            "name": "STATES",
            "final": "",
            "static": 1,
            "type": "ENUM",
            "class": "Promise",
            "module": "Promise"
        },
        {
            "file": "src/Promise.js",
            "line": 126,
            "itemtype": "property",
            "name": "isFulfilled\nwhether or not promise has been fulfilled",
            "type": "Boolean",
            "class": "Promise",
            "module": "Promise"
        },
        {
            "file": "src/Promise.js",
            "line": 133,
            "itemtype": "property",
            "name": "isRejected\nwhether or not promise has been rejected",
            "type": "Boolean",
            "class": "Promise",
            "module": "Promise"
        },
        {
            "file": "src/Promise.js",
            "line": 139,
            "itemtype": "property",
            "name": "fulfillment_state",
            "type": "Promise.STATES",
            "class": "Promise",
            "module": "Promise"
        },
        {
            "file": "src/Promise.js",
            "line": 144,
            "itemtype": "property",
            "name": "fulfillment_value\nvalue of fulfilled promise",
            "class": "Promise",
            "module": "Promise"
        },
        {
            "file": "src/Promise.js",
            "line": 149,
            "itemtype": "property",
            "name": "rejection_reason\nreason for rejected promise",
            "class": "Promise",
            "module": "Promise"
        },
        {
            "file": "src/Promise.js",
            "line": 160,
            "description": "This method allows the user to take action upon promise fulfillment or rejection",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "onFulfill",
                    "description": "a callback to call when promise has been fulfilled. Will be passed promise's value.\n                       for more info look in spec.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "onReject",
                    "description": "a callback to call upon rejection. Will be passed promise's rejection reason.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "Promise",
            "module": "Promise"
        },
        {
            "file": "src/Promise.js",
            "line": 213,
            "description": "this method can be used to fulfil a Promise outside of it's scope.",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "chainable": 1,
            "class": "Promise",
            "module": "Promise"
        },
        {
            "file": "src/Promise.js",
            "line": 241,
            "description": "this method can be used to reject a promise outside the scope",
            "params": [
                {
                    "name": "reason",
                    "description": ""
                }
            ],
            "chainable": 1,
            "class": "Promise",
            "module": "Promise"
        },
        {
            "file": "src/Promise.js",
            "line": 264,
            "description": "This method can be used to create custom promises that would wrap an object's methods",
            "itemtype": "method",
            "name": "extend",
            "static": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "target object",
                    "type": "Mixed"
                },
                {
                    "name": "methods",
                    "description": "a list of method names to wrap",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "a new extended Promise constructor",
                "type": "Promise"
            },
            "class": "Promise",
            "module": "Promise"
        },
        {
            "file": "test/lib/JasmineAdapter.js",
            "line": 1,
            "fileoverview": "Jasmine JsTestDriver Adapter.",
            "author": "misko@hevery.com (Misko Hevery)",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 3,
            "description": "Top level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 10,
            "access": "private",
            "tagname": "",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 17,
            "description": "Use <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "access": "private",
            "tagname": "",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 25,
            "description": "Show diagnostic messages in the console if set to true",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 31,
            "description": "Default interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 37,
            "description": "Default timeout interval in milliseconds for waitsFor() blocks.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 50,
            "description": "Allows for bound functions to be compared.  Internal use only.",
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "base",
                    "description": "bound 'this' for the function",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "function to find",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 114,
            "description": "Getter for the Jasmine environment. Ensures one gets created",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 122,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 132,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 142,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 152,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "typeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 163,
            "description": "Pretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": "an object to be outputted",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 175,
            "description": "Returns true if the object is a DOM Node.",
            "params": [
                {
                    "name": "obj",
                    "description": "object to check",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 185,
            "description": "Returns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "example": [
                "\n// don't care about which function is passed in, as long as it's a function\nexpect(mySpy).toHaveBeenCalledWith(jasmine.any(Function));"
            ],
            "params": [
                {
                    "name": "clazz",
                    "description": "",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "matchable object of the type clazz"
            },
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 199,
            "description": "Returns a matchable subset of a hash/JSON object. For use in expectations when you don't care about all of the\nattributes on the object.",
            "example": [
                "\n// don't care about any other attributes than foo.\nexpect(mySpy).toHaveBeenCalledWith(jasmine.hashContaining({foo: \"bar\"});"
            ],
            "params": [
                {
                    "name": "sample",
                    "description": "sample",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "matchable object for the sample"
            },
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 214,
            "description": "Jasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "example": [
                "\n// a stub\nvar myStub = jasmine.createSpy('myStub');  // can be used anywhere\n\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// actual foo.not will not be called, execution stops\nspyOn(foo, 'not');\n\n// foo.not spied upon, execution will continue to implementation\nspyOn(foo, 'not').andCallThrough();\n\n// fake example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// foo.not(val) will return val\nspyOn(foo, 'not').andCallFake(function(value) {return value;});\n\n// mock example\nfoo.not(7 == 7);\nexpect(foo.not).toHaveBeenCalled();\nexpect(foo.not).toHaveBeenCalledWith(true);"
            ],
            "is_constructor": 1,
            "see": [
                "spyOn",
                "jasmine.createSpy",
                "jasmine.createSpyObj"
            ],
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 259,
            "description": "The name of the spy, if provided.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 263,
            "description": "Is this Object a spy?",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 267,
            "description": "The actual function this spy stubs.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 272,
            "description": "Tracking of the most recent call to the spy.",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy.mostRecentCall.args = [1, 2];"
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 281,
            "description": "Holds arguments for each call to the spy, indexed by call count",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy(7, 8);\nmySpy.mostRecentCall.args = [7, 8];\nmySpy.argsForCall[0] = [1, 2];\nmySpy.argsForCall[1] = [7, 8];"
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 295,
            "description": "Tells a spy to call through to the actual implementation.",
            "example": [
                "\nvar foo = {\n  bar: function() { // do some stuff }\n}\n\n// defining a spy on an existing property: foo.bar\nspyOn(foo, 'bar').andCallThrough();"
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 311,
            "description": "For setting the return value of a spy.",
            "example": [
                "\n// defining a spy from scratch: foo() returns 'baz'\nvar foo = jasmine.createSpy('spy on foo').andReturn('baz');\n\n// defining a spy on an existing property: foo.bar() returns 'baz'\nspyOn(foo, 'bar').andReturn('baz');"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 330,
            "description": "For throwing an exception when a spy is called.",
            "example": [
                "\n// defining a spy from scratch: foo() throws an exception w/ message 'ouch'\nvar foo = jasmine.createSpy('spy on foo').andThrow('baz');\n\n// defining a spy on an existing property: foo.bar() throws an exception w/ message 'ouch'\nspyOn(foo, 'bar').andThrow('baz');"
            ],
            "params": [
                {
                    "name": "exceptionMsg",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 349,
            "description": "Calls an alternate implementation when a spy is called.",
            "example": [
                "\nvar baz = function() {\n  // do some stuff, return something\n}\n// defining a spy from scratch: foo() calls the function baz\nvar foo = jasmine.createSpy('spy on foo').andCall(baz);\n\n// defining a spy on an existing property: foo.bar() calls an anonymnous function\nspyOn(foo, 'bar').andCall(function() { return 'baz';} );"
            ],
            "params": [
                {
                    "name": "fakeFunc",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 369,
            "description": "Resets all of a spy's the tracking variables so that it can be used again.",
            "example": [
                "\nspyOn(foo, 'bar');\n\nfoo.bar();\n\nexpect(foo.bar.callCount).toEqual(1);\n\nfoo.bar.reset();\n\nexpect(foo.bar.callCount).toEqual(0);"
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 415,
            "description": "Determines whether an object is a spy.",
            "params": [
                {
                    "name": "putativeSpy",
                    "description": "",
                    "type": "jasmine.Spy|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 425,
            "description": "Creates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "params": [
                {
                    "name": "baseName",
                    "description": "name of spy class",
                    "type": "String"
                },
                {
                    "name": "methodNames",
                    "description": "array of names of methods to make spies",
                    "type": "Array"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 443,
            "description": "All parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 453,
            "description": "Function that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "example": [
                "\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\nspyOn(foo, 'not'); // actual foo.not will not be called, execution stops"
            ],
            "see": [
                "jasmine.createSpy"
            ],
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "methodName",
                    "description": ""
                }
            ],
            "return": {
                "description": "a Jasmine spy that can be chained with all spy methods"
            },
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 473,
            "description": "Creates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "example": [
                "\nit('should be true', function() {\n  expect(true).toEqual(true);\n});"
            ],
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 491,
            "description": "Creates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 504,
            "description": "Starts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "params": [
                {
                    "name": "actual",
                    "description": "Actual value to test against and expected value",
                    "type": "Object"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 517,
            "description": "Defines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "params": [
                {
                    "name": "func",
                    "description": "Function that defines part of a jasmine spec.",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 527,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 538,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 550,
            "description": "A function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "params": [
                {
                    "name": "beforeEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 562,
            "description": "A function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "params": [
                {
                    "name": "afterEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 574,
            "description": "Defines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "example": [
                "\n// TODO: a simple suite\n\n// TODO: a simple suite with a nested describe block"
            ],
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 594,
            "description": "Disables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 633,
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 638,
            "description": "Declare that a child class inherit it's prototype from the parent class.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "childClass",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentClass",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 646,
            "access": "private",
            "tagname": "",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 700,
            "description": "Environment for Jasmine",
            "is_constructor": 1,
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 738,
            "return": {
                "description": "an object containing jasmine version build info, if set."
            },
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 749,
            "return": {
                "description": "string containing jasmine version build info, if set."
            },
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 766,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 773,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 780,
            "description": "Register a reporter to receive status updates from Jasmine.",
            "params": [
                {
                    "name": "reporter",
                    "description": "An object which will receive status updates.",
                    "type": "jasmine.Reporter"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 977,
            "is_constructor": 1,
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1008,
            "description": "Blocks are functions with executable code that make up a spec.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1030,
            "is_constructor": 1,
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1132,
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1209,
            "description": "toBe: compares the actual to the expected using ===",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1217,
            "description": "toNotBe: compares the actual to the expected using !==",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toBe() instead.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1226,
            "description": "toEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1235,
            "description": "toNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toNotEqual() instead.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1244,
            "description": "Matcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1254,
            "description": "Matcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toMatch() instead.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1263,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1270,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1277,
            "description": "Matcher that compares the actual to null.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1284,
            "description": "Matcher that boolean not-nots the actual.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1292,
            "description": "Matcher that boolean nots the actual.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1300,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1322,
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1325,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was not called.",
            "deprecated": true,
            "deprecationMessage": "Use expect(xxx).not.toHaveBeenCalled() instead",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1349,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "example": [
                "\n"
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1378,
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1381,
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1398,
            "description": "Matcher that checks that the expected item is an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1407,
            "description": "Matcher that checks that the expected item is NOT an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toNotContain() instead.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1425,
            "description": "Matcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1442,
            "description": "Matcher that checks that the expected exception was thrown by the actual.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1532,
            "is_constructor": 1,
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1567,
            "description": "Holds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "is_constructor": 1,
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1573,
            "description": "The total count of results",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1577,
            "description": "Number of passed results",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1581,
            "description": "Number of failed results",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1585,
            "description": "Was this suite/spec skipped?",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1589,
            "ignore": "",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1595,
            "description": "Roll up the result counts.",
            "params": [
                {
                    "name": "result",
                    "description": ""
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1606,
            "description": "Adds a log message.",
            "params": [
                {
                    "name": "values",
                    "description": "Array of message parts which will be concatenated later."
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1614,
            "description": "Getter for the results: message & results.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1621,
            "description": "Adds a result, tracking counts (total, passed, & failed)",
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult|jasmine.NestedResults"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1641,
            "return": {
                "description": "True if <b>everything</b> below passed",
                "type": "Boolean"
            },
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1647,
            "description": "Base class for pretty printing for expectation results.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1654,
            "description": "Formats a value in a nice, human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1869,
            "description": "Runner",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1946,
            "description": "Internal representation of a Jasmine specification, or test.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "suite",
                    "description": "",
                    "type": "jasmine.Suite"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 1985,
            "description": "All parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 2008,
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 2021,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 2033,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 2189,
            "description": "Internal representation of a Jasmine suite.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentSuite",
                    "description": "",
                    "type": "jasmine.Suite"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 2286,
            "description": "A block which waits for some condition to become true, with timeout.",
            "is_constructor": 1,
            "extends": "jasmine.Block",
            "params": [
                {
                    "name": "env",
                    "description": "The Jasmine environment.",
                    "type": "jasmine.Env"
                },
                {
                    "name": "timeout",
                    "description": "The maximum time in milliseconds to wait for the condition to become true.",
                    "type": "Number"
                },
                {
                    "name": "latchFunction",
                    "description": "A function which returns true when the desired condition has been met.",
                    "type": "Function"
                },
                {
                    "name": "message",
                    "description": "The message to display if the desired condition hasn't been met within the given time period.",
                    "type": "String"
                },
                {
                    "name": "spec",
                    "description": "The Jasmine spec.",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "",
            "module": "Promise"
        },
        {
            "file": "test/lib/jasmine.js",
            "line": 2427,
            "class": "",
            "module": "Promise"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: license",
            "line": " lib/require.js:1"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/require.js:185"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/require.js:281"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/require.js:414"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/require.js:1267"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/Promise.js:160"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/Promise.js:264"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " test/lib/JasmineAdapter.js:1"
        },
        {
            "message": "unknown tag: ignore",
            "line": " test/lib/jasmine.js:50"
        },
        {
            "message": "unknown tag: ignore",
            "line": " test/lib/jasmine.js:122"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/lib/jasmine.js:122"
        },
        {
            "message": "unknown tag: ignore",
            "line": " test/lib/jasmine.js:132"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/lib/jasmine.js:132"
        },
        {
            "message": "unknown tag: ignore",
            "line": " test/lib/jasmine.js:142"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/lib/jasmine.js:142"
        },
        {
            "message": "unknown tag: ignore",
            "line": " test/lib/jasmine.js:152"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/lib/jasmine.js:152"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/lib/jasmine.js:163"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/lib/jasmine.js:175"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/lib/jasmine.js:185"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/lib/jasmine.js:199"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/lib/jasmine.js:415"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/lib/jasmine.js:453"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/lib/jasmine.js:738"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/lib/jasmine.js:749"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/lib/jasmine.js:766"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/lib/jasmine.js:773"
        },
        {
            "message": "unknown tag: ignore",
            "line": " test/lib/jasmine.js:1589"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/lib/jasmine.js:1641"
        },
        {
            "message": "Missing item type",
            "line": " lib/require.js:1"
        },
        {
            "message": "Missing item type\nHelper function for iterating over an array. If the func returns\na true value, it will break out of the loop.",
            "line": " lib/require.js:50"
        },
        {
            "message": "Missing item type\nHelper function for iterating over an array backwards. If the func\nreturns a true value, it will break out of the loop.",
            "line": " lib/require.js:65"
        },
        {
            "message": "Missing item type\nCycles over properties in an object and calls a function for each\nproperty value. If the function returns a truthy value, then the\niteration is stopped.",
            "line": " lib/require.js:84"
        },
        {
            "message": "Missing item type\nSimple function to mix in properties from source into target,\nbut only if target does not already have a property of the same name.\nThis is not robust in IE for transferring methods that match\nObject.prototype names, but the uses of mixin here seem unlikely to\ntrigger a problem related to that.",
            "line": " lib/require.js:100"
        },
        {
            "message": "Missing item type\nConstructs an error with a pointer to an URL with more information.",
            "line": " lib/require.js:185"
        },
        {
            "message": "Missing item type\nTrims the . and .. from an array of path segments.\nIt will keep a leading path segment if a .. will become\nthe first path segment, to help with module name lookups,\nwhich act like paths, but can be remapped. But the end result,\nall paths that use this function should look normalized.\nNOTE: this method MODIFIES the input array.",
            "line": " lib/require.js:248"
        },
        {
            "message": "Missing item type\nGiven a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "line": " lib/require.js:281"
        },
        {
            "message": "Missing item type\nCreates a module mapping that includes plugin prefix, module\nname, and path. If parentModuleMap is provided it will\nalso normalize the name via require.normalize()",
            "line": " lib/require.js:414"
        },
        {
            "message": "Missing item type\nInternal method to transfer globalQueue items to this context's\ndefQueue.",
            "line": " lib/require.js:544"
        },
        {
            "message": "Missing item type\nHelper function that creates a require function object to give to\nmodules that ask for it as a dependency. It needs to be specific\nper module because of the implication of path mappings that may\nneed to be relative to the module name.",
            "line": " lib/require.js:560"
        },
        {
            "message": "Missing item type\nChecks is the module is ready to define itself, and if so,\ndefine it. If the silent argument is true, then it will just\ndefine, but not notify listeners, and not ask for a context-wide\ncheck of all loaded modules. That is useful for cycle breaking.",
            "line": " lib/require.js:944"
        },
        {
            "message": "Missing item type\nGiven an event from a script node, get the requirejs info from it,\nand then removes the event listeners on the node.",
            "line": " lib/require.js:1267"
        },
        {
            "message": "Missing item type\nSet a configuration for the context.",
            "line": " lib/require.js:1300"
        },
        {
            "message": "Missing item type\nCalled to enable a module if it is still in the registry\nawaiting enablement. parent module is passed in for context,\nused by the optimizer.",
            "line": " lib/require.js:1517"
        },
        {
            "message": "Missing item type\nInternal method used by environment adapters to complete a load event.\nA load event could be a script load or just a load pass from a synchronous\nload call.",
            "line": " lib/require.js:1529"
        },
        {
            "message": "Missing item type\nConverts a module name + .extension into an URL path.\n*Requires* the use of a module name. It does not support using\nplain URLs like nameToUrl.",
            "line": " lib/require.js:1585"
        },
        {
            "message": "Missing item type\nConverts a module name to a file path. Supports cases where\nmoduleName may actually be just an URL.\nNote that it **does not** call normalize on the moduleName,\nit is assumed to have already been normalized. This is an\ninternal API, not a public one. Use toUrl for the public API.",
            "line": " lib/require.js:1603"
        },
        {
            "message": "Missing item type\nExecutes a module callack function. Broken out as a separate function\nsolely to allow the build system to sequence the files in the built\nlayer in the right sequence.",
            "line": " lib/require.js:1674"
        },
        {
            "message": "Missing item type\ncallback for script loads, used to check status of loading.",
            "line": " lib/require.js:1685"
        },
        {
            "message": "Missing item type\nCallback for script errors.",
            "line": " lib/require.js:1707"
        },
        {
            "message": "Missing item type\nMain entry point.\n\nIf the only argument to require is a string, then the module that\nis represented by that string is fetched for the appropriate context.\n\nIf the first argument is an array, then it will be treated as an array\nof dependency string names to fetch. An optional function callback can\nbe specified to execute when all of those dependencies are available.\n\nMake a local req variable to help Caja compliance (it assumes things\non a require that are not standardized), and to give a short\nname for minification/local scope use.",
            "line": " lib/require.js:1719"
        },
        {
            "message": "Missing item type\nSupport require.config() to make it easier to cooperate with other\nAMD loaders on globally agreed names.",
            "line": " lib/require.js:1769"
        },
        {
            "message": "Missing item type\nExport require as a global, but only if it does not already exist.",
            "line": " lib/require.js:1777"
        },
        {
            "message": "Missing item type\nAny errors that require explicitly generates will be passed to this\nfunction. Intercept/override it if you want custom error handling.",
            "line": " lib/require.js:1812"
        },
        {
            "message": "Missing item type\nDoes the request to load a module for the browser case.\nMake this a separate function to allow other environments\nto override it.",
            "line": " lib/require.js:1821"
        },
        {
            "message": "Missing item type\nThe function that handles definitions of modules. Differs from\nrequire() in that a string for the module should be the first argument,\nand the function to execute after dependencies are loaded should\nreturn a value to define the module corresponding to the first argument's\nname.",
            "line": " lib/require.js:1967"
        },
        {
            "message": "Missing item type\nExecutes the text. Normally just uses eval, but can be modified\nto use a better, environment-specific call. Only used for transpiling\nloader plugins, not for plain JS modules.",
            "line": " lib/require.js:2040"
        },
        {
            "message": "Missing item type\nthis method can be used to fulfil a Promise outside of it's scope.",
            "line": " src/Promise.js:213"
        },
        {
            "message": "Missing item type\nthis method can be used to reject a promise outside the scope",
            "line": " src/Promise.js:241"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/JasmineAdapter.js:1"
        },
        {
            "message": "Missing item type\nTop level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "line": " test/lib/jasmine.js:3"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:10"
        },
        {
            "message": "Missing item type\nUse <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "line": " test/lib/jasmine.js:17"
        },
        {
            "message": "Missing item type\nShow diagnostic messages in the console if set to true",
            "line": " test/lib/jasmine.js:25"
        },
        {
            "message": "Missing item type\nDefault interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "line": " test/lib/jasmine.js:31"
        },
        {
            "message": "Missing item type\nDefault timeout interval in milliseconds for waitsFor() blocks.",
            "line": " test/lib/jasmine.js:37"
        },
        {
            "message": "Missing item type\nAllows for bound functions to be compared.  Internal use only.",
            "line": " test/lib/jasmine.js:50"
        },
        {
            "message": "Missing item type\nGetter for the Jasmine environment. Ensures one gets created",
            "line": " test/lib/jasmine.js:114"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:122"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:132"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:142"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:152"
        },
        {
            "message": "Missing item type\nPretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "line": " test/lib/jasmine.js:163"
        },
        {
            "message": "Missing item type\nReturns true if the object is a DOM Node.",
            "line": " test/lib/jasmine.js:175"
        },
        {
            "message": "Missing item type\nReturns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "line": " test/lib/jasmine.js:185"
        },
        {
            "message": "Missing item type\nReturns a matchable subset of a hash/JSON object. For use in expectations when you don't care about all of the\nattributes on the object.",
            "line": " test/lib/jasmine.js:199"
        },
        {
            "message": "Missing item type\nJasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "line": " test/lib/jasmine.js:214"
        },
        {
            "message": "Missing item type\nThe name of the spy, if provided.",
            "line": " test/lib/jasmine.js:259"
        },
        {
            "message": "Missing item type\nIs this Object a spy?",
            "line": " test/lib/jasmine.js:263"
        },
        {
            "message": "Missing item type\nThe actual function this spy stubs.",
            "line": " test/lib/jasmine.js:267"
        },
        {
            "message": "Missing item type\nTracking of the most recent call to the spy.",
            "line": " test/lib/jasmine.js:272"
        },
        {
            "message": "Missing item type\nHolds arguments for each call to the spy, indexed by call count",
            "line": " test/lib/jasmine.js:281"
        },
        {
            "message": "Missing item type\nTells a spy to call through to the actual implementation.",
            "line": " test/lib/jasmine.js:295"
        },
        {
            "message": "Missing item type\nFor setting the return value of a spy.",
            "line": " test/lib/jasmine.js:311"
        },
        {
            "message": "Missing item type\nFor throwing an exception when a spy is called.",
            "line": " test/lib/jasmine.js:330"
        },
        {
            "message": "Missing item type\nCalls an alternate implementation when a spy is called.",
            "line": " test/lib/jasmine.js:349"
        },
        {
            "message": "Missing item type\nResets all of a spy's the tracking variables so that it can be used again.",
            "line": " test/lib/jasmine.js:369"
        },
        {
            "message": "Missing item type\nDetermines whether an object is a spy.",
            "line": " test/lib/jasmine.js:415"
        },
        {
            "message": "Missing item type\nCreates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "line": " test/lib/jasmine.js:425"
        },
        {
            "message": "Missing item type\nAll parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "line": " test/lib/jasmine.js:443"
        },
        {
            "message": "Missing item type\nFunction that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "line": " test/lib/jasmine.js:453"
        },
        {
            "message": "Missing item type\nCreates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "line": " test/lib/jasmine.js:473"
        },
        {
            "message": "Missing item type\nCreates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "line": " test/lib/jasmine.js:491"
        },
        {
            "message": "Missing item type\nStarts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "line": " test/lib/jasmine.js:504"
        },
        {
            "message": "Missing item type\nDefines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "line": " test/lib/jasmine.js:517"
        },
        {
            "message": "Missing item type\nWaits a fixed time period before moving to the next block.",
            "line": " test/lib/jasmine.js:527"
        },
        {
            "message": "Missing item type\nWaits for the latchFunction to return true before proceeding to the next block.",
            "line": " test/lib/jasmine.js:538"
        },
        {
            "message": "Missing item type\nA function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "line": " test/lib/jasmine.js:550"
        },
        {
            "message": "Missing item type\nA function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "line": " test/lib/jasmine.js:562"
        },
        {
            "message": "Missing item type\nDefines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "line": " test/lib/jasmine.js:574"
        },
        {
            "message": "Missing item type\nDisables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "line": " test/lib/jasmine.js:594"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:633"
        },
        {
            "message": "Missing item type\nDeclare that a child class inherit it's prototype from the parent class.",
            "line": " test/lib/jasmine.js:638"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:646"
        },
        {
            "message": "Missing item type\nEnvironment for Jasmine",
            "line": " test/lib/jasmine.js:700"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:738"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:749"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:766"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:773"
        },
        {
            "message": "Missing item type\nRegister a reporter to receive status updates from Jasmine.",
            "line": " test/lib/jasmine.js:780"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:977"
        },
        {
            "message": "Missing item type\nBlocks are functions with executable code that make up a spec.",
            "line": " test/lib/jasmine.js:1008"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:1030"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:1132"
        },
        {
            "message": "Missing item type\ntoBe: compares the actual to the expected using ===",
            "line": " test/lib/jasmine.js:1209"
        },
        {
            "message": "Missing item type\ntoNotBe: compares the actual to the expected using !==",
            "line": " test/lib/jasmine.js:1217"
        },
        {
            "message": "Missing item type\ntoEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "line": " test/lib/jasmine.js:1226"
        },
        {
            "message": "Missing item type\ntoNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "line": " test/lib/jasmine.js:1235"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "line": " test/lib/jasmine.js:1244"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "line": " test/lib/jasmine.js:1254"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to jasmine.undefined.",
            "line": " test/lib/jasmine.js:1263"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to jasmine.undefined.",
            "line": " test/lib/jasmine.js:1270"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to null.",
            "line": " test/lib/jasmine.js:1277"
        },
        {
            "message": "Missing item type\nMatcher that boolean not-nots the actual.",
            "line": " test/lib/jasmine.js:1284"
        },
        {
            "message": "Missing item type\nMatcher that boolean nots the actual.",
            "line": " test/lib/jasmine.js:1292"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was called.",
            "line": " test/lib/jasmine.js:1300"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:1322"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was not called.",
            "line": " test/lib/jasmine.js:1325"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "line": " test/lib/jasmine.js:1349"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:1378"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:1381"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is an element in the actual Array.",
            "line": " test/lib/jasmine.js:1398"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is NOT an element in the actual Array.",
            "line": " test/lib/jasmine.js:1407"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "line": " test/lib/jasmine.js:1425"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected exception was thrown by the actual.",
            "line": " test/lib/jasmine.js:1442"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:1532"
        },
        {
            "message": "Missing item type\nHolds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "line": " test/lib/jasmine.js:1567"
        },
        {
            "message": "Missing item type\nThe total count of results",
            "line": " test/lib/jasmine.js:1573"
        },
        {
            "message": "Missing item type\nNumber of passed results",
            "line": " test/lib/jasmine.js:1577"
        },
        {
            "message": "Missing item type\nNumber of failed results",
            "line": " test/lib/jasmine.js:1581"
        },
        {
            "message": "Missing item type\nWas this suite/spec skipped?",
            "line": " test/lib/jasmine.js:1585"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:1589"
        },
        {
            "message": "Missing item type\nRoll up the result counts.",
            "line": " test/lib/jasmine.js:1595"
        },
        {
            "message": "Missing item type\nAdds a log message.",
            "line": " test/lib/jasmine.js:1606"
        },
        {
            "message": "Missing item type\nGetter for the results: message & results.",
            "line": " test/lib/jasmine.js:1614"
        },
        {
            "message": "Missing item type\nAdds a result, tracking counts (total, passed, & failed)",
            "line": " test/lib/jasmine.js:1621"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:1641"
        },
        {
            "message": "Missing item type\nBase class for pretty printing for expectation results.",
            "line": " test/lib/jasmine.js:1647"
        },
        {
            "message": "Missing item type\nFormats a value in a nice, human-readable string.",
            "line": " test/lib/jasmine.js:1654"
        },
        {
            "message": "Missing item type\nRunner",
            "line": " test/lib/jasmine.js:1869"
        },
        {
            "message": "Missing item type\nInternal representation of a Jasmine specification, or test.",
            "line": " test/lib/jasmine.js:1946"
        },
        {
            "message": "Missing item type\nAll parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "line": " test/lib/jasmine.js:1985"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:2008"
        },
        {
            "message": "Missing item type\nWaits a fixed time period before moving to the next block.",
            "line": " test/lib/jasmine.js:2021"
        },
        {
            "message": "Missing item type\nWaits for the latchFunction to return true before proceeding to the next block.",
            "line": " test/lib/jasmine.js:2033"
        },
        {
            "message": "Missing item type\nInternal representation of a Jasmine suite.",
            "line": " test/lib/jasmine.js:2189"
        },
        {
            "message": "Missing item type\nA block which waits for some condition to become true, with timeout.",
            "line": " test/lib/jasmine.js:2286"
        },
        {
            "message": "Missing item type",
            "line": " test/lib/jasmine.js:2427"
        }
    ]
}